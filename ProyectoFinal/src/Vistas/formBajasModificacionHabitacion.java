/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Vistas;

import AccesoADatos.HabitacData;
import AccesoADatos.TipoHabitacionData;
import Entidades.Habitacion;
import Entidades.TipoHabitacion;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author matias
 */
public class formBajasModificacionHabitacion extends javax.swing.JInternalFrame {

    private DefaultTableModel modeloListaHab = new DefaultTableModel();
    private ArrayList<TipoHabitacion> listarTipos;
    private ArrayList<Habitacion> habitacionesPorTipo;
    private HabitacData habdata = new HabitacData();
    private TipoHabitacionData tipohabdata = new TipoHabitacionData();

    public formBajasModificacionHabitacion() {
        initComponents();
        
       
        crearCabecera();
        borrarTablaTipos();
        cargarComboTipos();
        cargarComboTiposEdicion();
      //  vincularCombos();
        cambiarEstado(false);
    
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jConfirmar = new javax.swing.JButton();
        jTipoHabitacion = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTHabitaciones = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtNumeroHabitacion = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        txtPisoHabitacion = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jCEstadoHab = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        jComboTipoHabitacion = new javax.swing.JComboBox<>();
        jRBaja = new javax.swing.JRadioButton();
        jRModificacion = new javax.swing.JRadioButton();

        setClosable(true);
        setResizable(true);
        setTitle("Bajas Modificación De Habitaciónes");

        jPanel1.setBackground(new java.awt.Color(27, 27, 27));

        jConfirmar.setText("Confirmar");
        jConfirmar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jConfirmarActionPerformed(evt);
            }
        });

        jTipoHabitacion.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jTipoHabitacionItemStateChanged(evt);
            }
        });
        jTipoHabitacion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTipoHabitacionActionPerformed(evt);
            }
        });

        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Filtrar Por Tipo de Habitación: ");

        jTHabitaciones.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jTHabitaciones.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTHabitacionesMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTHabitaciones);

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Seleccione una Habitacion:");

        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Numero De Habitación");

        txtNumeroHabitacion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNumeroHabitacionActionPerformed(evt);
            }
        });
        txtNumeroHabitacion.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtNumeroHabitacionKeyTyped(evt);
            }
        });

        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Piso");

        txtPisoHabitacion.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtPisoHabitacionKeyTyped(evt);
            }
        });

        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("Estado");

        jCEstadoHab.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Habilitada", "Inhabilitada" }));
        jCEstadoHab.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCEstadoHabActionPerformed(evt);
            }
        });

        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Tipo De Habitación");

        jComboTipoHabitacion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboTipoHabitacionActionPerformed(evt);
            }
        });

        jRBaja.setForeground(new java.awt.Color(255, 255, 255));
        jRBaja.setText("Dar de Baja");
        jRBaja.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRBajaActionPerformed(evt);
            }
        });

        jRModificacion.setForeground(new java.awt.Color(255, 255, 255));
        jRModificacion.setText("Editar");
        jRModificacion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRModificacionActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(49, 49, 49)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addGap(18, 18, 18)
                                .addComponent(txtNumeroHabitacion, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtPisoHabitacion, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jRBaja, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jRModificacion, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTipoHabitacion, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addGap(18, 18, 18)
                                .addComponent(jComboTipoHabitacion, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(9, 9, 9)
                                .addComponent(jLabel7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jCEstadoHab, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(300, 300, 300)
                                .addComponent(jConfirmar, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(47, 47, 47))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 492, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jTipoHabitacion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jRBaja)
                            .addComponent(jRModificacion))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jConfirmar, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(17, 17, 17))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 365, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(22, 22, 22)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jComboTipoHabitacion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4))
                        .addGap(42, 42, 42)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtNumeroHabitacion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5)
                            .addComponent(txtPisoHabitacion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))
                        .addGap(35, 35, 35)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(jCEstadoHab, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(19, Short.MAX_VALUE))))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    /////////////////////////////////////////////////////////////////////////////////////////
    
    
//     private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {                                         
//        // dar de baja
//        if ( jRBaja.isSelected() ){
//            if (txtid.getText().isEmpty()){
//                JOptionPane.showMessageDialog(null,"Debe seleccionar una fila de la tabla para eliminar.");
//            }
//            else {
//                tipohabdata.borrarTipoHabitacion(Integer.parseInt(txtid.getText()));
//                habdata.bajarhabitacionesdeTipo(Integer.parseInt(txtid.getText()));//borrar las habitaciones de ese tipo
//                borrarTabla();
//                rellenarTabla();
//            }
//                
//        }
//        
//        // actualizar
//        if ( jRModificacion.isSelected() ){
//            if (txtid.getText().isEmpty()){
//                JOptionPane.showMessageDialog(null,"Debe seleccionar una fila de la tabla para actualizar.");
//            }
//            else {
//                if (txtnombre.getText().isEmpty() || txtletra.getText().isEmpty() || 
//                    txtmax.getText().isEmpty() || txtimporte.getText().isEmpty() ) {
//                        JOptionPane.showMessageDialog(null, "Faltan agregar datos...");
//                }
//                else {
//                
//                    TipoHabitacion nueva = new TipoHabitacion();
//                    
//                    nueva.setIdTipoHabit(Integer.parseInt(txtid.getText()));
//                    nueva.setNombreTipo(txtnombre.getText());
//                    nueva.setLetraTipo(txtletra.getText().charAt(0));
//                    nueva.setMaxHuespedes(Integer.parseInt(txtmax.getText()));
//                    nueva.setImportePorNoche(Double.parseDouble(txtimporte.getText()));
//                   
//                    if (jComboBox1.getSelectedItem().equals("Habilitada")) {
//                        nueva.setEstado(Boolean.parseBoolean("true"));
//                        
//                        habdata.habilitarHabitacionesDeTipo(Integer.parseInt(txtid.getText()));
//                    }
//                    else {
//                        nueva.setEstado(Boolean.parseBoolean("false"));    ;
//                    }
//                    
//                    
//                    tipohabdata.editarTipoHabitacion(nueva);
//                    
//                    borrarTabla();
//                    rellenarTabla();
//                }
//                
//            }
//        }
//    }                    
//    
    //////////////////////////////////////////////////////////////////////////////////////////
    
    
    
    private void jConfirmarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jConfirmarActionPerformed

        if ( jRBaja.isSelected() ){
            if (txtNumeroHabitacion.getText().isEmpty()){
                JOptionPane.showMessageDialog(null,"Debe seleccionar una fila de la tabla para eliminar la Habitacion.");
            }
            else {
                
                habdata.bajarhabitacion( Integer.parseInt(jTHabitaciones.getValueAt(jTHabitaciones.getSelectedRow(), 0).toString()) );
               // tipohabdata.borrarTipoHabitacion(Integer.parseInt(txtid.getText()));
              // habdata.bajarhabitacionesdeTipo(Integer.parseInt(txtid.getText()));//borrar las habitaciones de ese tipo
                borrarTablaTipos();
                int id = Integer.parseInt(jTipoHabitacion.getSelectedItem().toString().substring(0, jTipoHabitacion.getSelectedItem().toString().indexOf(" ")));
                rellenarTablaHabitacionesPorTipo(id);
                 jComboTipoHabitacion.setSelectedIndex(-1);
                txtNumeroHabitacion.setText("");
                txtPisoHabitacion.setText("");
            }
        }
     
        if ( jRModificacion.isSelected() ){
            if (txtNumeroHabitacion.getText().isEmpty()){
                JOptionPane.showMessageDialog(null,"Debe seleccionar una fila de la tabla para actualizar.");
            }
            else {
                if (txtNumeroHabitacion.getText().isEmpty() || txtPisoHabitacion.getText().isEmpty() ) {
                        JOptionPane.showMessageDialog(null, "Faltan agregar datos...");
                }
                else {
                
                    Habitacion nueva = new Habitacion();
                    
                    
                //    nueva.setTipoHabitacion(Integer.parseInt(jTHabitaciones.getValueAt(jTHabitaciones.getSelectedRow(), 0).toString()) );
                    nueva.setNroHabitacion(Integer.parseInt(txtNumeroHabitacion.getText()));
                    nueva.setPiso(Integer.parseInt(txtPisoHabitacion.getText()));
                    
                   
//                    if (jComboBox1.getSelectedItem().equals("Habilitada")) {
//                        nueva.setEstado(Boolean.parseBoolean("true"));
//                        
//                        habdata.habilitarHabitacionesDeTipo(Integer.parseInt(txtid.getText()));
//                    }
//                    else {
//                        nueva.setEstado(Boolean.parseBoolean("false"));    ;
//                    }
//                    
//                    
//                    tipohabdata.editarTipoHabitacion(nueva);
//                    
//                    borrarTabla();
//                    rellenarTabla();
                }
                
            }
        }
        
        
    }//GEN-LAST:event_jConfirmarActionPerformed

    private void jTipoHabitacionItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jTipoHabitacionItemStateChanged

    }//GEN-LAST:event_jTipoHabitacionItemStateChanged

    private void jTipoHabitacionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTipoHabitacionActionPerformed
        int id = Integer.parseInt(jTipoHabitacion.getSelectedItem().toString().substring(0, jTipoHabitacion.getSelectedItem().toString().indexOf(" ")));

        borrarTablaTipos();
        rellenarTablaHabitacionesPorTipo(id);
        
        jComboTipoHabitacion.setSelectedIndex(-1);
        txtNumeroHabitacion.setText("");
        txtPisoHabitacion.setText("");

    }//GEN-LAST:event_jTipoHabitacionActionPerformed

    private void jTHabitacionesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTHabitacionesMouseClicked
        // TODO add your handling code here:

        int idHab = (Integer) (modeloListaHab.getValueAt(jTHabitaciones.getSelectedRow(), 0));
        
        jComboTipoHabitacion.setSelectedIndex(jTipoHabitacion.getSelectedIndex());
        
        txtNumeroHabitacion.setText( (modeloListaHab.getValueAt(jTHabitaciones.getSelectedRow(), 1)).toString() );
       
        txtPisoHabitacion.setText( (modeloListaHab.getValueAt(jTHabitaciones.getSelectedRow(), 3)).toString() );
  

       

    }//GEN-LAST:event_jTHabitacionesMouseClicked

    private void txtNumeroHabitacionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNumeroHabitacionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNumeroHabitacionActionPerformed

    private void txtNumeroHabitacionKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNumeroHabitacionKeyTyped
        char c = evt.getKeyChar();
        if (!Character.isDigit(c)) {
            evt.consume(); // Consumir el evento, evitando que se ingrese el número.
        }
    }//GEN-LAST:event_txtNumeroHabitacionKeyTyped

    private void txtPisoHabitacionKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPisoHabitacionKeyTyped
        char c = evt.getKeyChar();
        if (!Character.isDigit(c)) {
            evt.consume(); // Consumir el evento si no es un número.

        }
    }//GEN-LAST:event_txtPisoHabitacionKeyTyped

    private void jCEstadoHabActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCEstadoHabActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCEstadoHabActionPerformed

    private void jComboTipoHabitacionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboTipoHabitacionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboTipoHabitacionActionPerformed

    private void jRBajaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRBajaActionPerformed
        // TODO add your handling code here:
        jRModificacion.setSelected(false);
        cambiarEstado(false);
        

    }//GEN-LAST:event_jRBajaActionPerformed

    private void jRModificacionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRModificacionActionPerformed
        // TODO add your handling code here:
        jRBaja.setSelected(false);
        cambiarEstado(true);
     
    }//GEN-LAST:event_jRModificacionActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> jCEstadoHab;
    private javax.swing.JComboBox<String> jComboTipoHabitacion;
    private javax.swing.JButton jConfirmar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JRadioButton jRBaja;
    private javax.swing.JRadioButton jRModificacion;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTHabitaciones;
    private javax.swing.JComboBox<String> jTipoHabitacion;
    private javax.swing.JTextField txtNumeroHabitacion;
    private javax.swing.JTextField txtPisoHabitacion;
    // End of variables declaration//GEN-END:variables

    public void borrarTablaTipos() {
        int filas = modeloListaHab.getRowCount() - 1;

        for (; filas >= 0; filas--) {
            modeloListaHab.removeRow(filas);
        }
    }

    public void rellenarTablaHabitacionesPorTipo(int idTipo) {

       habitacionesPorTipo = (ArrayList<Habitacion>) habdata.listarHabPorTipo(idTipo);

        for (Habitacion h : habitacionesPorTipo) {

            modeloListaHab.addRow(new Object[]{h.getIdHabitacion(), h.getNroHabitacion(), h.getTipoHabitacion().getNombreTipo(), h.getPiso(), h.getTipoHabitacion().getMaxHuespedes(), h.getTipoHabitacion().getImportePorNoche()});

        }
    }
    public void cargarComboTipos() {
       
     
        listarTipos = (ArrayList<TipoHabitacion>) tipohabdata.listarTipoHab();
        for (TipoHabitacion lista : listarTipos) {
            jTipoHabitacion.addItem(lista.getIdTipoHabit()+" - "+lista.getNombreTipo());
        }  
    }
    
    
    public void cargarComboTiposEdicion() {
       
     
        listarTipos = (ArrayList<TipoHabitacion>) tipohabdata.listarTipoHab();
        for (TipoHabitacion lista : listarTipos) {
            jComboTipoHabitacion.addItem(lista.getIdTipoHabit()+" - "+lista.getNombreTipo());
        }  
    }
    
    
    public void vincularCombos() {
        
        jComboTipoHabitacion.setSelectedIndex(jTipoHabitacion.getSelectedIndex()+1);
        
        
    }
    
    
    
    
    
    public void crearCabecera() {
        
        modeloListaHab.addColumn("id Habit");
        modeloListaHab.addColumn("Nro Habit");
        modeloListaHab.addColumn("Nombre Tipo");
        modeloListaHab.addColumn("Piso");
                
        jTHabitaciones.setModel(modeloListaHab);
        
    }


 
   
    
    private void cambiarEstado(boolean x){
       jComboTipoHabitacion.setEnabled(x);
       jCEstadoHab.setEnabled(x);
       txtNumeroHabitacion.setEnabled(x);
       txtPisoHabitacion.setEnabled(x);
       
    }

}

